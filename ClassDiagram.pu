@startuml sample

package "etrobocon2024" {
    package "module" {
        package "API" {
            class Controller{
                + static constexpr double MOTOR_PWM_MAX = 100.0
                + static constexpr double MOTOR_PWM_MIN = -100.0
                + Controller(rightWheel(PORT_B), leftWheel(PORT_C), armMortor(PORT_A))
                + void setRightMotorPwm(const double)
                + void setLeftMotorPwm(const double)
                + void resetRightMotorPwm()
                + void resetLeftMotorPwm()
                + void resetWheelsMotorPwm()
                + void stopWheelsMotor()
                + void setArmMotorPwm(const double)
                + void resetArmMotorPwm()
                + void stopArmMotor()
                + double getRightMotorPwm()
                + double getLeftMotorPwm()
                - ev3api::Motor rightWheel
                - ev3api::Motor leftWheel
                - ev3api::Motor armMotor
                - static double pwmOfRightWheel
                - static double pwmOfLeftWheel
                - static double pwmOfArm
                - double limitPwmValue(const double)
            }
            class Measurer {
                + Measurer()
                + int getBrightness()
                + rgb_raw_t getRawColor()
                + int getLeftCount()
                + int getRightCount()
                + int getArmMotorCount()
                + bool getLeftButton()
                + bool getRightButton()
                + bool getEnterButton()
                + int getForwardDistance()
                + double getVoltage()
                - ev3api::ColorSensor colorSensor
                - ev3api::SonarSensor sonarSensor
                - ev3api::Motor leftWheel
                - ev3api::Motor rightWheel
                - ev3api::Motor armMotor
            }
            class Timer {
                + Timer()
                + void sleep(int)
                + int now()
                - ev3api::Clock clock
            }
        }

        package "Calculator" {
            enum COLOR <<int>> {
                NONE = 0
                BLACK = 1
                WHITE = 2
                BLUE = 3
                GREEN = 4
                YELLOW = 5
                RED = 6
            }

            struct Hsv {
                - int hue
                - int saturation
                - int value
            }

            class ColorJudge {
                + ColorJudge() = delete
                + static COLOR getColor(rgb_raw_t const& rgb)
                + static COLOR stringToColor(const char* str)
                + static const char* colorToString(COLOR color)
                - static constexpr int SATURATION_BORDER = 27
                - static constexpr int BLACK_LIMIT_BORDER = 10
                - static constexpr int WHITE_LIMIT_BORDER = 250
                - static constexpr int BLACK_BORDER = 110
                - static constexpr int RED_BORDER = 25
                - static constexpr int YELLOW_BORDER = 50
                - static constexpr int GREEN_BORDER = 170
                - static constexpr int BLUE_BORDER = 300
                - static constexpr rgb_raw_t MAX_RGB = { 244, 245, 252 }
                - static constexpr rgb_raw_t MIN_RGB = { 9, 10, 10 }
                - static Hsv convertRgbToHsv(rgb_raw_t const& rgb)
            }

            class Mileage {
                + static double calculateWheelMileage(int angle)
                + static double calculateMileage(int rightAngle, int leftAngle)
                - Mileage()
            }

            struct PidGain {
                + double kp
                + double ki
                + double kd
                - PidGain(double _kp, double _ki, double _kd)
            }

            class Pid {
                + Pid(double _kp, double _ki, double _kd, double _targetValue)
                + void setPidGain(double _kp, double _ki, double _kd)
                + double calculatePid(double currentValue, double delta = 0.01)
                - PidGain pidGain
                - double prevDeviation
                - double integral
                - double targetValue
            }

            class SpeedCalculator {
                + SpeedCalculator(double _targetSpeed)
                + SpeedCalculator(double _rightTargetSpeed, double _leftTargetSpeed)
                + double calculateRightMotorPwmFromTargetSpeed()
                + double calculateLeftMotorPwmFromTargetSpeed()
                - const double rightTargetSpeed
                - const double leftTargetSpeed
                - Pid rightPid
                - Pid leftPid
                - Timer timer
                - Measurer measurer
                - double rightMotorPwm
                - double leftMotorPwm
                - double prevRightMileage
                - double prevLeftMileage
                - int prevRightTime
                - int prevLeftTime
                - static constexpr double K_P = 0.004
                - static constexpr double K_I = 0.0000005
                - static constexpr double K_D = 0.0007
                - static constexpr double R_K_P = 0.004
                - static constexpr double R_K_I = 0.0000005
                - static constexpr double R_K_D = 0.0007
                - double calculateSpeed(double diffMileage, double diffTime)
            }
        }

        package "common" {
            class Logger {
                + Logger()
                + void log(const char*)
                + void logWarning(const char*)
                + void logError(const char*)
                + void logHighlight(const char*)
                + void outputToFile()
                + void initLogs()
                - static char logs[65536]
            }
            class StringOperator {
                + static char* removeEOL(const char*)
                - StringOperator()
            }
        }

        package "Motion" {
            class ColorLineTracing {
                + ColorLineTracing(COLOR _targetColor, double _targetSpeed, int _targetBrightness, const PidGain& _gain, bool& _isLeftEdge)
                + using LineTracing::run
                # bool isMetPreCondition(double targetSpeed) override
                # bool isMetContinuationCondition() override
                # void logRunning() override
                - static constexpr int JUDGE_COUNT = 3
                - int colorCount = 0
                - COLOR targetColor
            }
            LineTracing <|-- ColorLineTracing

            class ColorStraight {
                + ColorStraight(COLOR _targetColor, double _speed)
                # virtual bool isMetPreCondition() override
                # virtual bool isMetContinuationCondition() override
                # virtual void logRunning() override
                - static constexpr int JUDGE_COUNT = 3
                - int colorCount = 0
                - COLOR targetColor
            }
            Straight <|-- ColorStraight

            class DistanceLineTraicing {
                + DistanceLineTracing(double _targetDistance, double _targetSpeed, int _targetBrightness, const PidGain& _pidGain, bool& _isLeftEdge)
                + using LineTracing::run
                # bool isMetPreCondition(double targetSpeed) override
                # bool isMetContinuationCondition() override
                # void logRunning() override
                - double targetDistance
            }
            LineTracing <|-- DistanceLineTraicing

            class DistanceStraight {
                + DistanceStraight(double _targetDiatance, double _speed)
                # virtual bool isMetPreCondition() override
                # virtual bool isMetContinuationCondition() override
                # virtual void logRunning() override
                - double targetDistance
            }
            Straight <|-- DistanceStraight

            class EdgeChanging {
                + EdgeChanging(bool& _isLeftEdge, bool _nextEdge)
                # void run()
                # void logRunning()
                - bool& isLeftEdge
                - bool nextEdge
            }
            Motion <|-- EdgeChanging

            class LineTracing
            Motion <|-- LineTracing

            class Motion

            class PwmRotation
            Rotation <|-- PwmRotation

            class Rotation
            Motion <|-- Rotation

            class Sleeping
            Motion <|-- Sleeping

            class Straight
            Motion <|-- Straight
        }

        enum Area
        class AreaMaster

        class Calibrator

        class EtRobocon2024

        enum COMMAND

        class MotionParser
    }
}

package "etrobocon2024-camera-system" {
    package "src" {
        class CameraSystem
        class Client
        class DetectObject
        class ImageProcessing
        class ResponseError
        class OfficialInterface
        class RoboSnap
        class TrainTracker
    }
}
@enduml
